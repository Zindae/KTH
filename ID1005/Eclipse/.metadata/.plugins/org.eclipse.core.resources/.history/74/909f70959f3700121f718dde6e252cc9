import javax.swing.JFrame;

public class EnArmadBandit extends JFrame {

	/**
	 * Metoden getWheelModel returnerar en matris som beskriver, 
	 * hur många hjul simulatorn har (3) och hur symbolerna är 
	 * arrangerade på varje hjul (10 olika symboler och hjulen är identiska).
	 */
	public int [][] getWheelModel(){
		
	}
	/**
	 * Metoden getNextEvent() returnerar en sträng som beskriver 
	 * vad användaren/spelaren har gjort: ”creditbutton” betyder 
	 * klick på knappen ”Insert coin” och ”rollbutton” betyder att 
	 * spelaren tryckte på knappen ”ROLL”. Inga andra händelser 
	 * rapporteras, och metoden återvänder inte från anropet 
	 * förrän någon av dessa händelser har inträffat.
	 */
	public String getNextEvent(){
		
	}
	/**
	 * Metoden setCredit(int n) används för att visa hur många
	 *  krediter spelaren har.
	 */
	public void setCredit(int n){
		
	}
	/**
	 * Metoden win(int amount) används för att tända (0 < amount) 
	 * eller släcka (0 == amount) WIN- skylten på simulatorn.
	 */
	public void win(int amount){
		
	}
	/**
	 * Metoden roll(int [] ar) släcker WIN-skylten och rullar 
	 * (animerar) fram hjulen till de symboler man vill visa 
	 * på betallinjen. Om man t ex skickar in arrayen {0, 1, 2}
	 *  så kommer första hjulet att stanna på plommon, andra hjulet
	 *   på apelsin och tredje hjulet på körsbär.
	 */
	public void roll(int [] ar){
		
	}
	/**
	 * Parametern title är den text man vill ha på fönstret.
	 *  Parametern fallBackMode väljer mellan två olika sätt 
	 *  att rita ram och betallinje över hjulen. Om det ser 
	 *  konstigt ut med fallBackMode=false så bör det fungera
	 *   på alla plattformar med true istället.
	 */
	public SlotFrame(String title, boolean fallBackMode){
		
		
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		new SlotFrame(); 
	}

}
